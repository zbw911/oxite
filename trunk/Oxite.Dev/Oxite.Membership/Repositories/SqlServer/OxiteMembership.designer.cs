#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oxite.Modules.Membership.Repositories.SqlServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Oxite.Database")]
	public partial class OxiteMembershipDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertoxite_User(oxite_User instance);
    partial void Updateoxite_User(oxite_User instance);
    partial void Deleteoxite_User(oxite_User instance);
    partial void Insertoxite_Role(oxite_Role instance);
    partial void Updateoxite_Role(oxite_Role instance);
    partial void Deleteoxite_Role(oxite_Role instance);
    partial void Insertoxite_BlogRoleUserRelationship(oxite_BlogRoleUserRelationship instance);
    partial void Updateoxite_BlogRoleUserRelationship(oxite_BlogRoleUserRelationship instance);
    partial void Deleteoxite_BlogRoleUserRelationship(oxite_BlogRoleUserRelationship instance);
    partial void Insertoxite_PageRoleUserRelationship(oxite_PageRoleUserRelationship instance);
    partial void Updateoxite_PageRoleUserRelationship(oxite_PageRoleUserRelationship instance);
    partial void Deleteoxite_PageRoleUserRelationship(oxite_PageRoleUserRelationship instance);
    partial void Insertoxite_PostRoleUserRelationship(oxite_PostRoleUserRelationship instance);
    partial void Updateoxite_PostRoleUserRelationship(oxite_PostRoleUserRelationship instance);
    partial void Deleteoxite_PostRoleUserRelationship(oxite_PostRoleUserRelationship instance);
    partial void Insertoxite_SiteRoleUserRelationship(oxite_SiteRoleUserRelationship instance);
    partial void Updateoxite_SiteRoleUserRelationship(oxite_SiteRoleUserRelationship instance);
    partial void Deleteoxite_SiteRoleUserRelationship(oxite_SiteRoleUserRelationship instance);
    partial void Insertoxite_UserModuleData(oxite_UserModuleData instance);
    partial void Updateoxite_UserModuleData(oxite_UserModuleData instance);
    partial void Deleteoxite_UserModuleData(oxite_UserModuleData instance);
    partial void Insertoxite_Language(oxite_Language instance);
    partial void Updateoxite_Language(oxite_Language instance);
    partial void Deleteoxite_Language(oxite_Language instance);
    #endregion
		
		public OxiteMembershipDataContext() : 
				base("Data Source=.\\SQLEXPRESS;Initial Catalog=Oxite.Database;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public OxiteMembershipDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OxiteMembershipDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OxiteMembershipDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OxiteMembershipDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<oxite_User> oxite_Users
		{
			get
			{
				return this.GetTable<oxite_User>();
			}
		}
		
		public System.Data.Linq.Table<oxite_Role> oxite_Roles
		{
			get
			{
				return this.GetTable<oxite_Role>();
			}
		}
		
		public System.Data.Linq.Table<oxite_BlogRoleUserRelationship> oxite_BlogRoleUserRelationships
		{
			get
			{
				return this.GetTable<oxite_BlogRoleUserRelationship>();
			}
		}
		
		public System.Data.Linq.Table<oxite_PageRoleUserRelationship> oxite_PageRoleUserRelationships
		{
			get
			{
				return this.GetTable<oxite_PageRoleUserRelationship>();
			}
		}
		
		public System.Data.Linq.Table<oxite_PostRoleUserRelationship> oxite_PostRoleUserRelationships
		{
			get
			{
				return this.GetTable<oxite_PostRoleUserRelationship>();
			}
		}
		
		public System.Data.Linq.Table<oxite_SiteRoleUserRelationship> oxite_SiteRoleUserRelationships
		{
			get
			{
				return this.GetTable<oxite_SiteRoleUserRelationship>();
			}
		}
		
		public System.Data.Linq.Table<oxite_UserModuleData> oxite_UserModuleDatas
		{
			get
			{
				return this.GetTable<oxite_UserModuleData>();
			}
		}
		
		public System.Data.Linq.Table<oxite_Language> oxite_Languages
		{
			get
			{
				return this.GetTable<oxite_Language>();
			}
		}
	}
	
	[Table(Name="dbo.oxite_User")]
	public partial class oxite_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _Username;
		
		private string _DisplayName;
		
		private string _Email;
		
		private string _HashedEmail;
		
		private System.Guid _DefaultLanguageID;
		
		private byte _Status;
		
		private EntitySet<oxite_BlogRoleUserRelationship> _oxite_BlogRoleUserRelationships;
		
		private EntitySet<oxite_PageRoleUserRelationship> _oxite_PageRoleUserRelationships;
		
		private EntitySet<oxite_PostRoleUserRelationship> _oxite_PostRoleUserRelationships;
		
		private EntitySet<oxite_SiteRoleUserRelationship> _oxite_SiteRoleUserRelationships;
		
		private EntitySet<oxite_UserModuleData> _oxite_UserModuleDatas;
		
		private EntityRef<oxite_Language> _oxite_Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHashedEmailChanging(string value);
    partial void OnHashedEmailChanged();
    partial void OnDefaultLanguageIDChanging(System.Guid value);
    partial void OnDefaultLanguageIDChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public oxite_User()
		{
			this._oxite_BlogRoleUserRelationships = new EntitySet<oxite_BlogRoleUserRelationship>(new Action<oxite_BlogRoleUserRelationship>(this.attach_oxite_BlogRoleUserRelationships), new Action<oxite_BlogRoleUserRelationship>(this.detach_oxite_BlogRoleUserRelationships));
			this._oxite_PageRoleUserRelationships = new EntitySet<oxite_PageRoleUserRelationship>(new Action<oxite_PageRoleUserRelationship>(this.attach_oxite_PageRoleUserRelationships), new Action<oxite_PageRoleUserRelationship>(this.detach_oxite_PageRoleUserRelationships));
			this._oxite_PostRoleUserRelationships = new EntitySet<oxite_PostRoleUserRelationship>(new Action<oxite_PostRoleUserRelationship>(this.attach_oxite_PostRoleUserRelationships), new Action<oxite_PostRoleUserRelationship>(this.detach_oxite_PostRoleUserRelationships));
			this._oxite_SiteRoleUserRelationships = new EntitySet<oxite_SiteRoleUserRelationship>(new Action<oxite_SiteRoleUserRelationship>(this.attach_oxite_SiteRoleUserRelationships), new Action<oxite_SiteRoleUserRelationship>(this.detach_oxite_SiteRoleUserRelationships));
			this._oxite_UserModuleDatas = new EntitySet<oxite_UserModuleData>(new Action<oxite_UserModuleData>(this.attach_oxite_UserModuleDatas), new Action<oxite_UserModuleData>(this.detach_oxite_UserModuleDatas));
			this._oxite_Language = default(EntityRef<oxite_Language>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_HashedEmail", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string HashedEmail
		{
			get
			{
				return this._HashedEmail;
			}
			set
			{
				if ((this._HashedEmail != value))
				{
					this.OnHashedEmailChanging(value);
					this.SendPropertyChanging();
					this._HashedEmail = value;
					this.SendPropertyChanged("HashedEmail");
					this.OnHashedEmailChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultLanguageID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DefaultLanguageID
		{
			get
			{
				return this._DefaultLanguageID;
			}
			set
			{
				if ((this._DefaultLanguageID != value))
				{
					if (this._oxite_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultLanguageID = value;
					this.SendPropertyChanged("DefaultLanguageID");
					this.OnDefaultLanguageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="oxite_User_oxite_BlogRoleUserRelationship", Storage="_oxite_BlogRoleUserRelationships", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<oxite_BlogRoleUserRelationship> oxite_BlogRoleUserRelationships
		{
			get
			{
				return this._oxite_BlogRoleUserRelationships;
			}
			set
			{
				this._oxite_BlogRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_User_oxite_PageRoleUserRelationship", Storage="_oxite_PageRoleUserRelationships", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<oxite_PageRoleUserRelationship> oxite_PageRoleUserRelationships
		{
			get
			{
				return this._oxite_PageRoleUserRelationships;
			}
			set
			{
				this._oxite_PageRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_User_oxite_PostRoleUserRelationship", Storage="_oxite_PostRoleUserRelationships", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<oxite_PostRoleUserRelationship> oxite_PostRoleUserRelationships
		{
			get
			{
				return this._oxite_PostRoleUserRelationships;
			}
			set
			{
				this._oxite_PostRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_User_oxite_SiteRoleUserRelationship", Storage="_oxite_SiteRoleUserRelationships", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<oxite_SiteRoleUserRelationship> oxite_SiteRoleUserRelationships
		{
			get
			{
				return this._oxite_SiteRoleUserRelationships;
			}
			set
			{
				this._oxite_SiteRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_User_oxite_UserModuleData", Storage="_oxite_UserModuleDatas", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<oxite_UserModuleData> oxite_UserModuleDatas
		{
			get
			{
				return this._oxite_UserModuleDatas;
			}
			set
			{
				this._oxite_UserModuleDatas.Assign(value);
			}
		}
		
		[Association(Name="oxite_Language_oxite_User", Storage="_oxite_Language", ThisKey="DefaultLanguageID", OtherKey="LanguageID", IsForeignKey=true)]
		public oxite_Language oxite_Language
		{
			get
			{
				return this._oxite_Language.Entity;
			}
			set
			{
				oxite_Language previousValue = this._oxite_Language.Entity;
				if (((previousValue != value) 
							|| (this._oxite_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_Language.Entity = null;
						previousValue.oxite_Users.Remove(this);
					}
					this._oxite_Language.Entity = value;
					if ((value != null))
					{
						value.oxite_Users.Add(this);
						this._DefaultLanguageID = value.LanguageID;
					}
					else
					{
						this._DefaultLanguageID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oxite_BlogRoleUserRelationships(oxite_BlogRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = this;
		}
		
		private void detach_oxite_BlogRoleUserRelationships(oxite_BlogRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = null;
		}
		
		private void attach_oxite_PageRoleUserRelationships(oxite_PageRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = this;
		}
		
		private void detach_oxite_PageRoleUserRelationships(oxite_PageRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = null;
		}
		
		private void attach_oxite_PostRoleUserRelationships(oxite_PostRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = this;
		}
		
		private void detach_oxite_PostRoleUserRelationships(oxite_PostRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = null;
		}
		
		private void attach_oxite_SiteRoleUserRelationships(oxite_SiteRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = this;
		}
		
		private void detach_oxite_SiteRoleUserRelationships(oxite_SiteRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = null;
		}
		
		private void attach_oxite_UserModuleDatas(oxite_UserModuleData entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = this;
		}
		
		private void detach_oxite_UserModuleDatas(oxite_UserModuleData entity)
		{
			this.SendPropertyChanging();
			entity.oxite_User = null;
		}
	}
	
	[Table(Name="dbo.oxite_Role")]
	public partial class oxite_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GroupRoleID;
		
		private System.Guid _RoleID;
		
		private string _RoleName;
		
		private byte _RoleType;
		
		private EntitySet<oxite_Role> _oxite_Roles;
		
		private EntitySet<oxite_BlogRoleUserRelationship> _oxite_BlogRoleUserRelationships;
		
		private EntitySet<oxite_PageRoleUserRelationship> _oxite_PageRoleUserRelationships;
		
		private EntitySet<oxite_PostRoleUserRelationship> _oxite_PostRoleUserRelationships;
		
		private EntitySet<oxite_SiteRoleUserRelationship> _oxite_SiteRoleUserRelationships;
		
		private EntityRef<oxite_Role> _oxite_Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupRoleIDChanging(System.Guid value);
    partial void OnGroupRoleIDChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleTypeChanging(byte value);
    partial void OnRoleTypeChanged();
    #endregion
		
		public oxite_Role()
		{
			this._oxite_Roles = new EntitySet<oxite_Role>(new Action<oxite_Role>(this.attach_oxite_Roles), new Action<oxite_Role>(this.detach_oxite_Roles));
			this._oxite_BlogRoleUserRelationships = new EntitySet<oxite_BlogRoleUserRelationship>(new Action<oxite_BlogRoleUserRelationship>(this.attach_oxite_BlogRoleUserRelationships), new Action<oxite_BlogRoleUserRelationship>(this.detach_oxite_BlogRoleUserRelationships));
			this._oxite_PageRoleUserRelationships = new EntitySet<oxite_PageRoleUserRelationship>(new Action<oxite_PageRoleUserRelationship>(this.attach_oxite_PageRoleUserRelationships), new Action<oxite_PageRoleUserRelationship>(this.detach_oxite_PageRoleUserRelationships));
			this._oxite_PostRoleUserRelationships = new EntitySet<oxite_PostRoleUserRelationship>(new Action<oxite_PostRoleUserRelationship>(this.attach_oxite_PostRoleUserRelationships), new Action<oxite_PostRoleUserRelationship>(this.detach_oxite_PostRoleUserRelationships));
			this._oxite_SiteRoleUserRelationships = new EntitySet<oxite_SiteRoleUserRelationship>(new Action<oxite_SiteRoleUserRelationship>(this.attach_oxite_SiteRoleUserRelationships), new Action<oxite_SiteRoleUserRelationship>(this.detach_oxite_SiteRoleUserRelationships));
			this._oxite_Role1 = default(EntityRef<oxite_Role>);
			OnCreated();
		}
		
		[Column(Storage="_GroupRoleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupRoleID
		{
			get
			{
				return this._GroupRoleID;
			}
			set
			{
				if ((this._GroupRoleID != value))
				{
					if (this._oxite_Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupRoleIDChanging(value);
					this.SendPropertyChanging();
					this._GroupRoleID = value;
					this.SendPropertyChanged("GroupRoleID");
					this.OnGroupRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_RoleType", DbType="TinyInt NOT NULL")]
		public byte RoleType
		{
			get
			{
				return this._RoleType;
			}
			set
			{
				if ((this._RoleType != value))
				{
					this.OnRoleTypeChanging(value);
					this.SendPropertyChanging();
					this._RoleType = value;
					this.SendPropertyChanged("RoleType");
					this.OnRoleTypeChanged();
				}
			}
		}
		
		[Association(Name="oxite_Role_oxite_Role", Storage="_oxite_Roles", ThisKey="RoleID", OtherKey="GroupRoleID")]
		public EntitySet<oxite_Role> oxite_Roles
		{
			get
			{
				return this._oxite_Roles;
			}
			set
			{
				this._oxite_Roles.Assign(value);
			}
		}
		
		[Association(Name="oxite_Role_oxite_BlogRoleUserRelationship", Storage="_oxite_BlogRoleUserRelationships", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<oxite_BlogRoleUserRelationship> oxite_BlogRoleUserRelationships
		{
			get
			{
				return this._oxite_BlogRoleUserRelationships;
			}
			set
			{
				this._oxite_BlogRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_Role_oxite_PageRoleUserRelationship", Storage="_oxite_PageRoleUserRelationships", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<oxite_PageRoleUserRelationship> oxite_PageRoleUserRelationships
		{
			get
			{
				return this._oxite_PageRoleUserRelationships;
			}
			set
			{
				this._oxite_PageRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_Role_oxite_PostRoleUserRelationship", Storage="_oxite_PostRoleUserRelationships", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<oxite_PostRoleUserRelationship> oxite_PostRoleUserRelationships
		{
			get
			{
				return this._oxite_PostRoleUserRelationships;
			}
			set
			{
				this._oxite_PostRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_Role_oxite_SiteRoleUserRelationship", Storage="_oxite_SiteRoleUserRelationships", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<oxite_SiteRoleUserRelationship> oxite_SiteRoleUserRelationships
		{
			get
			{
				return this._oxite_SiteRoleUserRelationships;
			}
			set
			{
				this._oxite_SiteRoleUserRelationships.Assign(value);
			}
		}
		
		[Association(Name="oxite_Role_oxite_Role", Storage="_oxite_Role1", ThisKey="GroupRoleID", OtherKey="RoleID", IsForeignKey=true)]
		public oxite_Role oxite_Role1
		{
			get
			{
				return this._oxite_Role1.Entity;
			}
			set
			{
				oxite_Role previousValue = this._oxite_Role1.Entity;
				if (((previousValue != value) 
							|| (this._oxite_Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_Role1.Entity = null;
						previousValue.oxite_Roles.Remove(this);
					}
					this._oxite_Role1.Entity = value;
					if ((value != null))
					{
						value.oxite_Roles.Add(this);
						this._GroupRoleID = value.RoleID;
					}
					else
					{
						this._GroupRoleID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oxite_Roles(oxite_Role entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role1 = this;
		}
		
		private void detach_oxite_Roles(oxite_Role entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role1 = null;
		}
		
		private void attach_oxite_BlogRoleUserRelationships(oxite_BlogRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = this;
		}
		
		private void detach_oxite_BlogRoleUserRelationships(oxite_BlogRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = null;
		}
		
		private void attach_oxite_PageRoleUserRelationships(oxite_PageRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = this;
		}
		
		private void detach_oxite_PageRoleUserRelationships(oxite_PageRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = null;
		}
		
		private void attach_oxite_PostRoleUserRelationships(oxite_PostRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = this;
		}
		
		private void detach_oxite_PostRoleUserRelationships(oxite_PostRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = null;
		}
		
		private void attach_oxite_SiteRoleUserRelationships(oxite_SiteRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = this;
		}
		
		private void detach_oxite_SiteRoleUserRelationships(oxite_SiteRoleUserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Role = null;
		}
	}
	
	[Table(Name="dbo.oxite_BlogRoleUserRelationship")]
	public partial class oxite_BlogRoleUserRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BlogID;
		
		private System.Guid _RoleID;
		
		private System.Guid _UserID;
		
		private EntityRef<oxite_Role> _oxite_Role;
		
		private EntityRef<oxite_User> _oxite_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIDChanging(System.Guid value);
    partial void OnBlogIDChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public oxite_BlogRoleUserRelationship()
		{
			this._oxite_Role = default(EntityRef<oxite_Role>);
			this._oxite_User = default(EntityRef<oxite_User>);
			OnCreated();
		}
		
		[Column(Storage="_BlogID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._oxite_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._oxite_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="oxite_Role_oxite_BlogRoleUserRelationship", Storage="_oxite_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public oxite_Role oxite_Role
		{
			get
			{
				return this._oxite_Role.Entity;
			}
			set
			{
				oxite_Role previousValue = this._oxite_Role.Entity;
				if (((previousValue != value) 
							|| (this._oxite_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_Role.Entity = null;
						previousValue.oxite_BlogRoleUserRelationships.Remove(this);
					}
					this._oxite_Role.Entity = value;
					if ((value != null))
					{
						value.oxite_BlogRoleUserRelationships.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_Role");
				}
			}
		}
		
		[Association(Name="oxite_User_oxite_BlogRoleUserRelationship", Storage="_oxite_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public oxite_User oxite_User
		{
			get
			{
				return this._oxite_User.Entity;
			}
			set
			{
				oxite_User previousValue = this._oxite_User.Entity;
				if (((previousValue != value) 
							|| (this._oxite_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_User.Entity = null;
						previousValue.oxite_BlogRoleUserRelationships.Remove(this);
					}
					this._oxite_User.Entity = value;
					if ((value != null))
					{
						value.oxite_BlogRoleUserRelationships.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.oxite_PageRoleUserRelationship")]
	public partial class oxite_PageRoleUserRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PageID;
		
		private System.Guid _RoleID;
		
		private System.Guid _UserID;
		
		private EntityRef<oxite_Role> _oxite_Role;
		
		private EntityRef<oxite_User> _oxite_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIDChanging(System.Guid value);
    partial void OnPageIDChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public oxite_PageRoleUserRelationship()
		{
			this._oxite_Role = default(EntityRef<oxite_Role>);
			this._oxite_User = default(EntityRef<oxite_User>);
			OnCreated();
		}
		
		[Column(Storage="_PageID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._oxite_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._oxite_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="oxite_Role_oxite_PageRoleUserRelationship", Storage="_oxite_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public oxite_Role oxite_Role
		{
			get
			{
				return this._oxite_Role.Entity;
			}
			set
			{
				oxite_Role previousValue = this._oxite_Role.Entity;
				if (((previousValue != value) 
							|| (this._oxite_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_Role.Entity = null;
						previousValue.oxite_PageRoleUserRelationships.Remove(this);
					}
					this._oxite_Role.Entity = value;
					if ((value != null))
					{
						value.oxite_PageRoleUserRelationships.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_Role");
				}
			}
		}
		
		[Association(Name="oxite_User_oxite_PageRoleUserRelationship", Storage="_oxite_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public oxite_User oxite_User
		{
			get
			{
				return this._oxite_User.Entity;
			}
			set
			{
				oxite_User previousValue = this._oxite_User.Entity;
				if (((previousValue != value) 
							|| (this._oxite_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_User.Entity = null;
						previousValue.oxite_PageRoleUserRelationships.Remove(this);
					}
					this._oxite_User.Entity = value;
					if ((value != null))
					{
						value.oxite_PageRoleUserRelationships.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.oxite_PostRoleUserRelationship")]
	public partial class oxite_PostRoleUserRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PostID;
		
		private System.Guid _RoleID;
		
		private System.Guid _UserID;
		
		private EntityRef<oxite_Role> _oxite_Role;
		
		private EntityRef<oxite_User> _oxite_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(System.Guid value);
    partial void OnPostIDChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public oxite_PostRoleUserRelationship()
		{
			this._oxite_Role = default(EntityRef<oxite_Role>);
			this._oxite_User = default(EntityRef<oxite_User>);
			OnCreated();
		}
		
		[Column(Storage="_PostID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._oxite_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._oxite_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="oxite_Role_oxite_PostRoleUserRelationship", Storage="_oxite_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public oxite_Role oxite_Role
		{
			get
			{
				return this._oxite_Role.Entity;
			}
			set
			{
				oxite_Role previousValue = this._oxite_Role.Entity;
				if (((previousValue != value) 
							|| (this._oxite_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_Role.Entity = null;
						previousValue.oxite_PostRoleUserRelationships.Remove(this);
					}
					this._oxite_Role.Entity = value;
					if ((value != null))
					{
						value.oxite_PostRoleUserRelationships.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_Role");
				}
			}
		}
		
		[Association(Name="oxite_User_oxite_PostRoleUserRelationship", Storage="_oxite_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public oxite_User oxite_User
		{
			get
			{
				return this._oxite_User.Entity;
			}
			set
			{
				oxite_User previousValue = this._oxite_User.Entity;
				if (((previousValue != value) 
							|| (this._oxite_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_User.Entity = null;
						previousValue.oxite_PostRoleUserRelationships.Remove(this);
					}
					this._oxite_User.Entity = value;
					if ((value != null))
					{
						value.oxite_PostRoleUserRelationships.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.oxite_SiteRoleUserRelationship")]
	public partial class oxite_SiteRoleUserRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SiteID;
		
		private System.Guid _RoleID;
		
		private System.Guid _UserID;
		
		private EntityRef<oxite_Role> _oxite_Role;
		
		private EntityRef<oxite_User> _oxite_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public oxite_SiteRoleUserRelationship()
		{
			this._oxite_Role = default(EntityRef<oxite_Role>);
			this._oxite_User = default(EntityRef<oxite_User>);
			OnCreated();
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._oxite_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._oxite_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="oxite_Role_oxite_SiteRoleUserRelationship", Storage="_oxite_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public oxite_Role oxite_Role
		{
			get
			{
				return this._oxite_Role.Entity;
			}
			set
			{
				oxite_Role previousValue = this._oxite_Role.Entity;
				if (((previousValue != value) 
							|| (this._oxite_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_Role.Entity = null;
						previousValue.oxite_SiteRoleUserRelationships.Remove(this);
					}
					this._oxite_Role.Entity = value;
					if ((value != null))
					{
						value.oxite_SiteRoleUserRelationships.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_Role");
				}
			}
		}
		
		[Association(Name="oxite_User_oxite_SiteRoleUserRelationship", Storage="_oxite_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public oxite_User oxite_User
		{
			get
			{
				return this._oxite_User.Entity;
			}
			set
			{
				oxite_User previousValue = this._oxite_User.Entity;
				if (((previousValue != value) 
							|| (this._oxite_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_User.Entity = null;
						previousValue.oxite_SiteRoleUserRelationships.Remove(this);
					}
					this._oxite_User.Entity = value;
					if ((value != null))
					{
						value.oxite_SiteRoleUserRelationships.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.oxite_UserModuleData")]
	public partial class oxite_UserModuleData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _ModuleName;
		
		private string _Data;
		
		private EntityRef<oxite_User> _oxite_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnModuleNameChanging(string value);
    partial void OnModuleNameChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public oxite_UserModuleData()
		{
			this._oxite_User = default(EntityRef<oxite_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._oxite_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ModuleName
		{
			get
			{
				return this._ModuleName;
			}
			set
			{
				if ((this._ModuleName != value))
				{
					this.OnModuleNameChanging(value);
					this.SendPropertyChanging();
					this._ModuleName = value;
					this.SendPropertyChanged("ModuleName");
					this.OnModuleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="oxite_User_oxite_UserModuleData", Storage="_oxite_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public oxite_User oxite_User
		{
			get
			{
				return this._oxite_User.Entity;
			}
			set
			{
				oxite_User previousValue = this._oxite_User.Entity;
				if (((previousValue != value) 
							|| (this._oxite_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oxite_User.Entity = null;
						previousValue.oxite_UserModuleDatas.Remove(this);
					}
					this._oxite_User.Entity = value;
					if ((value != null))
					{
						value.oxite_UserModuleDatas.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("oxite_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.oxite_Language")]
	public partial class oxite_Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LanguageID;
		
		private string _LanguageName;
		
		private string _LanguageDisplayName;
		
		private EntitySet<oxite_User> _oxite_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(System.Guid value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    partial void OnLanguageDisplayNameChanging(string value);
    partial void OnLanguageDisplayNameChanged();
    #endregion
		
		public oxite_Language()
		{
			this._oxite_Users = new EntitySet<oxite_User>(new Action<oxite_User>(this.attach_oxite_Users), new Action<oxite_User>(this.detach_oxite_Users));
			OnCreated();
		}
		
		[Column(Storage="_LanguageID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageName", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageDisplayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LanguageDisplayName
		{
			get
			{
				return this._LanguageDisplayName;
			}
			set
			{
				if ((this._LanguageDisplayName != value))
				{
					this.OnLanguageDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageDisplayName = value;
					this.SendPropertyChanged("LanguageDisplayName");
					this.OnLanguageDisplayNameChanged();
				}
			}
		}
		
		[Association(Name="oxite_Language_oxite_User", Storage="_oxite_Users", ThisKey="LanguageID", OtherKey="DefaultLanguageID")]
		public EntitySet<oxite_User> oxite_Users
		{
			get
			{
				return this._oxite_Users;
			}
			set
			{
				this._oxite_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oxite_Users(oxite_User entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Language = this;
		}
		
		private void detach_oxite_Users(oxite_User entity)
		{
			this.SendPropertyChanging();
			entity.oxite_Language = null;
		}
	}
}
#pragma warning restore 1591
